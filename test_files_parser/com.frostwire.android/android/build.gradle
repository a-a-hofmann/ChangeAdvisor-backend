/*
 * Created by Angel Leon (@gubatron), Alden Torres (aldenml)
 * Copyright (c) 2011-2016, FrostWire(R). All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// if false, you will need to have a symlink to frostwire-jlibtorrent at the root of the project.
// this won't work for windows users, who will either have to have this in true, or just
// copy frostwire-jlibtorrent if they need to hack frostwire-jlibtorrent while coding.
def useJlibtorrentFromMaven = true
def JLIBTORRENT_VERSION='1.1.0.22'

if (!useJlibtorrentFromMaven && !new File("frostwire-jlibtorrent").exists()) {
    def path = new File("frostwire-jlibtorrent").getAbsolutePath()
    throw new Exception("You want to use jlibtorrent from source but you don't have a symlink at '" + path + "' with the sources.");
}

import groovy.swing.SwingBuilder

apply plugin: 'com.android.application'
apply from: '../common/dependencies.gradle'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
    }
}

repositories {
    mavenCentral()
}

def manifestVersionCode() {
    def manifestFile = file(project.projectDir.absolutePath + '/AndroidManifest.xml')

    def ns = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new XmlParser().parse(manifestFile)

    return Integer.parseInt(xml.attributes()[ns.versionCode].toString())
}

def manifestVersionName() {
    def manifestFile = file(project.projectDir.absolutePath + '/AndroidManifest.xml')

    def ns = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new XmlParser().parse(manifestFile)

    return xml.attributes()[ns.versionName].toString()
}

def changeApkOutput(variant) {
    def flavor = 'unknown'
    if (variant.productFlavors[0].name.equals("basic")) {
        flavor = 'basic'
    } else if (variant.productFlavors[0].name.equals("plus1")) {
        flavor = 'plus'
    }
    def suffix = project.ext.versionName + '-b' + project.ext.versionCode + '-' + flavor
    def name = "$project.buildDir/frostwire-android-" + variant.buildType.name + '-' + suffix

    variant.outputs.each { output ->
        if (output.zipAlign) {
            output.outputFile = file(name + '.apk')
        }

        //output.packageApplication.outputFile = file(name + '-unaligned.apk')
    }
}

project.ext.versionCode = manifestVersionCode()
project.ext.versionName = manifestVersionName()

android {

    compileSdkVersion 16
    buildToolsVersion '23.0.2'

    defaultConfig {
        versionName project.ext.versionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            res.srcDirs = ['res', 'apollo/res', ]
            aidl.srcDirs = ['src', 'apollo/src']
            assets.srcDirs = ['assets']
            java {
                srcDir '../common/src/main/java'

                srcDir 'apollo/src'
                srcDir 'src'

                if (!useJlibtorrentFromMaven) {
                    //To avoid 'Can't register given path of type 'SOURCE' ... error in intelliJ
                    //make a symlink to frostwire-jlibtorrent inside our content root folder,
                    //at the same level where desktop,common and android are.
                    srcDir 'frostwire-jlibtorrent/src/main/java'
                    exclude '**/demo/*.java'
                }

                exclude '**/MobileCore*.java'
            }
        }

        plus1.res.srcDirs = ['res-plus1']
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "2g"
        jumboMode = true
    }

    signingConfigs {
        release {
            storeFile file("../../frostwire-tools/installer_builders/android.keystore/frostwire.keystore")
            storePassword ""
            keyAlias ""
            keyPassword ""
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        basic {
            applicationId 'com.frostwire.android'
            versionCode 8100000 + project.ext.versionCode
        }
        plus1 {
            applicationId 'com.frostwire.android'
            versionCode 9000000 + project.ext.versionCode
        }
    }

    applicationVariants.all { variant ->
        changeApkOutput(variant)
    }
}

dependencies {
    compile 'com.android.support:support-v4:23.2.0'
    compile 'com.google.android.gms:play-services-ads:8.4.0'

    compile 'com.squareup.picasso:picasso:2.5.2'

    if (useJlibtorrentFromMaven) {
        compile 'com.frostwire:jlibtorrent:' + JLIBTORRENT_VERSION
    }
    compile 'com.frostwire:jlibtorrent-android-arm:' + JLIBTORRENT_VERSION
    compile 'com.frostwire:jlibtorrent-android-x86:' + JLIBTORRENT_VERSION

    compile fileTree(dir: 'libs', include: ['*.jar'])
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':assembleRelease')) {

        def myKeyAlias = ""
        def myKeyPassword = ""

        if (System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true,
                        title: 'Enter keystore data',
                        alwaysOnTop: true,
                        resizable: true,
                        locationRelativeTo: null,
                        show: true,
                        size: [215, 147]
                ) {
                    vbox {
                        label(text: "Key Alias:")
                        inputAlias = textField()
                        label(text: "Key Password:")
                        inputPassword = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            myKeyAlias = inputAlias.text
                            myKeyPassword = new String(inputPassword.password)
                            dispose();
                        })
                    }
                }
            }
        } else {
            myKeyAlias = System.console().readPassword("\nKey Alias: ")
            myKeyAlias = new String(myKeyAlias)
            myKeyPassword = System.console().readPassword("\nKey Password: ")
            myKeyPassword = new String(myKeyPassword)
        }

        android.signingConfigs.release.keyAlias = myKeyAlias
        android.signingConfigs.release.storePassword = myKeyPassword
        android.signingConfigs.release.keyPassword = myKeyPassword
    }
}
